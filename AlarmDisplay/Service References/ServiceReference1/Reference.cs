//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlarmDisplay.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceRealTimeUnit")]
    public interface IServiceRealTimeUnit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRealTimeUnit/SendData", ReplyAction="http://tempuri.org/IServiceRealTimeUnit/SendDataResponse")]
        bool SendData(string RTUid, string address, string message, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRealTimeUnit/SendData", ReplyAction="http://tempuri.org/IServiceRealTimeUnit/SendDataResponse")]
        System.Threading.Tasks.Task<bool> SendDataAsync(string RTUid, string address, string message, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRealTimeUnit/ApplyOnSystem", ReplyAction="http://tempuri.org/IServiceRealTimeUnit/ApplyOnSystemResponse")]
        string ApplyOnSystem(string id, string publicKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRealTimeUnit/ApplyOnSystem", ReplyAction="http://tempuri.org/IServiceRealTimeUnit/ApplyOnSystemResponse")]
        System.Threading.Tasks.Task<string> ApplyOnSystemAsync(string id, string publicKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceRealTimeUnitChannel : AlarmDisplay.ServiceReference1.IServiceRealTimeUnit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceRealTimeUnitClient : System.ServiceModel.ClientBase<AlarmDisplay.ServiceReference1.IServiceRealTimeUnit>, AlarmDisplay.ServiceReference1.IServiceRealTimeUnit {
        
        public ServiceRealTimeUnitClient() {
        }
        
        public ServiceRealTimeUnitClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceRealTimeUnitClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRealTimeUnitClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRealTimeUnitClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SendData(string RTUid, string address, string message, byte[] signature) {
            return base.Channel.SendData(RTUid, address, message, signature);
        }
        
        public System.Threading.Tasks.Task<bool> SendDataAsync(string RTUid, string address, string message, byte[] signature) {
            return base.Channel.SendDataAsync(RTUid, address, message, signature);
        }
        
        public string ApplyOnSystem(string id, string publicKey) {
            return base.Channel.ApplyOnSystem(id, publicKey);
        }
        
        public System.Threading.Tasks.Task<string> ApplyOnSystemAsync(string id, string publicKey) {
            return base.Channel.ApplyOnSystemAsync(id, publicKey);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceDatabaseManager")]
    public interface IServiceDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/AddDITag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/AddDITagResponse")]
        bool AddDITag(string id, string desc, int scanTime, bool realTime, string rtuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/AddDITag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/AddDITagResponse")]
        System.Threading.Tasks.Task<bool> AddDITagAsync(string id, string desc, int scanTime, bool realTime, string rtuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/AddAITag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/AddAITagResponse")]
        bool AddAITag(string id, string desc, int scanTime, bool realTime, string rtuId, double lowLimit, double highLimit, string units, string simType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/AddAITag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/AddAITagResponse")]
        System.Threading.Tasks.Task<bool> AddAITagAsync(string id, string desc, int scanTime, bool realTime, string rtuId, double lowLimit, double highLimit, string units, string simType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/AddDOTag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/AddDOTagResponse")]
        bool AddDOTag(string id, string desc, double initValue, string rtuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/AddDOTag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/AddDOTagResponse")]
        System.Threading.Tasks.Task<bool> AddDOTagAsync(string id, string desc, double initValue, string rtuId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/AddAOTag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/AddAOTagResponse")]
        bool AddAOTag(string id, string desc, double initValue, string rtuId, double lowLimit, double highLimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/AddAOTag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/AddAOTagResponse")]
        System.Threading.Tasks.Task<bool> AddAOTagAsync(string id, string desc, double initValue, string rtuId, double lowLimit, double highLimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetRTUs", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetRTUsResponse")]
        string[] GetRTUs(bool type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetRTUs", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetRTUsResponse")]
        System.Threading.Tasks.Task<string[]> GetRTUsAsync(bool type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetSimAddress", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetSimAddressResponse")]
        string GetSimAddress(bool type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetSimAddress", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetSimAddressResponse")]
        System.Threading.Tasks.Task<string> GetSimAddressAsync(bool type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetTagValue", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetTagValueResponse")]
        string GetTagValue(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetTagValue", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetTagValueResponse")]
        System.Threading.Tasks.Task<string> GetTagValueAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/SetTagValue", ReplyAction="http://tempuri.org/IServiceDatabaseManager/SetTagValueResponse")]
        bool SetTagValue(string tagId, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/SetTagValue", ReplyAction="http://tempuri.org/IServiceDatabaseManager/SetTagValueResponse")]
        System.Threading.Tasks.Task<bool> SetTagValueAsync(string tagId, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetTags", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetTagsResponse")]
        string[] GetTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetTags", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetTagsResponse")]
        System.Threading.Tasks.Task<string[]> GetTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetTagInfo", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetTagInfoResponse")]
        System.Collections.Generic.Dictionary<string, string> GetTagInfo(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/GetTagInfo", ReplyAction="http://tempuri.org/IServiceDatabaseManager/GetTagInfoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetTagInfoAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/RemoveTag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/RemoveTagResponse")]
        bool RemoveTag(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/RemoveTag", ReplyAction="http://tempuri.org/IServiceDatabaseManager/RemoveTagResponse")]
        System.Threading.Tasks.Task<bool> RemoveTagAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/SwitchScan", ReplyAction="http://tempuri.org/IServiceDatabaseManager/SwitchScanResponse")]
        bool SwitchScan(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/SwitchScan", ReplyAction="http://tempuri.org/IServiceDatabaseManager/SwitchScanResponse")]
        System.Threading.Tasks.Task<bool> SwitchScanAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/SwitchAutoManual", ReplyAction="http://tempuri.org/IServiceDatabaseManager/SwitchAutoManualResponse")]
        bool SwitchAutoManual(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/SwitchAutoManual", ReplyAction="http://tempuri.org/IServiceDatabaseManager/SwitchAutoManualResponse")]
        System.Threading.Tasks.Task<bool> SwitchAutoManualAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/SwitchDriver", ReplyAction="http://tempuri.org/IServiceDatabaseManager/SwitchDriverResponse")]
        bool SwitchDriver(string tagId, string address, string simType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/SwitchDriver", ReplyAction="http://tempuri.org/IServiceDatabaseManager/SwitchDriverResponse")]
        System.Threading.Tasks.Task<bool> SwitchDriverAsync(string tagId, string address, string simType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/ChangeInfo", ReplyAction="http://tempuri.org/IServiceDatabaseManager/ChangeInfoResponse")]
        bool ChangeInfo(string tagId, System.Tuple<string, string> newVal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDatabaseManager/ChangeInfo", ReplyAction="http://tempuri.org/IServiceDatabaseManager/ChangeInfoResponse")]
        System.Threading.Tasks.Task<bool> ChangeInfoAsync(string tagId, System.Tuple<string, string> newVal);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceDatabaseManagerChannel : AlarmDisplay.ServiceReference1.IServiceDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDatabaseManagerClient : System.ServiceModel.ClientBase<AlarmDisplay.ServiceReference1.IServiceDatabaseManager>, AlarmDisplay.ServiceReference1.IServiceDatabaseManager {
        
        public ServiceDatabaseManagerClient() {
        }
        
        public ServiceDatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceDatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddDITag(string id, string desc, int scanTime, bool realTime, string rtuId) {
            return base.Channel.AddDITag(id, desc, scanTime, realTime, rtuId);
        }
        
        public System.Threading.Tasks.Task<bool> AddDITagAsync(string id, string desc, int scanTime, bool realTime, string rtuId) {
            return base.Channel.AddDITagAsync(id, desc, scanTime, realTime, rtuId);
        }
        
        public bool AddAITag(string id, string desc, int scanTime, bool realTime, string rtuId, double lowLimit, double highLimit, string units, string simType) {
            return base.Channel.AddAITag(id, desc, scanTime, realTime, rtuId, lowLimit, highLimit, units, simType);
        }
        
        public System.Threading.Tasks.Task<bool> AddAITagAsync(string id, string desc, int scanTime, bool realTime, string rtuId, double lowLimit, double highLimit, string units, string simType) {
            return base.Channel.AddAITagAsync(id, desc, scanTime, realTime, rtuId, lowLimit, highLimit, units, simType);
        }
        
        public bool AddDOTag(string id, string desc, double initValue, string rtuId) {
            return base.Channel.AddDOTag(id, desc, initValue, rtuId);
        }
        
        public System.Threading.Tasks.Task<bool> AddDOTagAsync(string id, string desc, double initValue, string rtuId) {
            return base.Channel.AddDOTagAsync(id, desc, initValue, rtuId);
        }
        
        public bool AddAOTag(string id, string desc, double initValue, string rtuId, double lowLimit, double highLimit, string units) {
            return base.Channel.AddAOTag(id, desc, initValue, rtuId, lowLimit, highLimit, units);
        }
        
        public System.Threading.Tasks.Task<bool> AddAOTagAsync(string id, string desc, double initValue, string rtuId, double lowLimit, double highLimit, string units) {
            return base.Channel.AddAOTagAsync(id, desc, initValue, rtuId, lowLimit, highLimit, units);
        }
        
        public string[] GetRTUs(bool type) {
            return base.Channel.GetRTUs(type);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRTUsAsync(bool type) {
            return base.Channel.GetRTUsAsync(type);
        }
        
        public string GetSimAddress(bool type) {
            return base.Channel.GetSimAddress(type);
        }
        
        public System.Threading.Tasks.Task<string> GetSimAddressAsync(bool type) {
            return base.Channel.GetSimAddressAsync(type);
        }
        
        public string GetTagValue(string name) {
            return base.Channel.GetTagValue(name);
        }
        
        public System.Threading.Tasks.Task<string> GetTagValueAsync(string name) {
            return base.Channel.GetTagValueAsync(name);
        }
        
        public bool SetTagValue(string tagId, double value) {
            return base.Channel.SetTagValue(tagId, value);
        }
        
        public System.Threading.Tasks.Task<bool> SetTagValueAsync(string tagId, double value) {
            return base.Channel.SetTagValueAsync(tagId, value);
        }
        
        public string[] GetTags() {
            return base.Channel.GetTags();
        }
        
        public System.Threading.Tasks.Task<string[]> GetTagsAsync() {
            return base.Channel.GetTagsAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetTagInfo(string tagId) {
            return base.Channel.GetTagInfo(tagId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetTagInfoAsync(string tagId) {
            return base.Channel.GetTagInfoAsync(tagId);
        }
        
        public bool RemoveTag(string tagId) {
            return base.Channel.RemoveTag(tagId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTagAsync(string tagId) {
            return base.Channel.RemoveTagAsync(tagId);
        }
        
        public bool SwitchScan(string tagId) {
            return base.Channel.SwitchScan(tagId);
        }
        
        public System.Threading.Tasks.Task<bool> SwitchScanAsync(string tagId) {
            return base.Channel.SwitchScanAsync(tagId);
        }
        
        public bool SwitchAutoManual(string tagId) {
            return base.Channel.SwitchAutoManual(tagId);
        }
        
        public System.Threading.Tasks.Task<bool> SwitchAutoManualAsync(string tagId) {
            return base.Channel.SwitchAutoManualAsync(tagId);
        }
        
        public bool SwitchDriver(string tagId, string address, string simType) {
            return base.Channel.SwitchDriver(tagId, address, simType);
        }
        
        public System.Threading.Tasks.Task<bool> SwitchDriverAsync(string tagId, string address, string simType) {
            return base.Channel.SwitchDriverAsync(tagId, address, simType);
        }
        
        public bool ChangeInfo(string tagId, System.Tuple<string, string> newVal) {
            return base.Channel.ChangeInfo(tagId, newVal);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeInfoAsync(string tagId, System.Tuple<string, string> newVal) {
            return base.Channel.ChangeInfoAsync(tagId, newVal);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceAlarmDisplay", CallbackContract=typeof(AlarmDisplay.ServiceReference1.IServiceAlarmDisplayCallback))]
    public interface IServiceAlarmDisplay {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAlarmDisplay/AlarmDisplayInit", ReplyAction="http://tempuri.org/IServiceAlarmDisplay/AlarmDisplayInitResponse")]
        void AlarmDisplayInit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAlarmDisplay/AlarmDisplayInit", ReplyAction="http://tempuri.org/IServiceAlarmDisplay/AlarmDisplayInitResponse")]
        System.Threading.Tasks.Task AlarmDisplayInitAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAlarmDisplayCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAlarmDisplay/RaiseAlarm", ReplyAction="http://tempuri.org/IServiceAlarmDisplay/RaiseAlarmResponse")]
        void RaiseAlarm(string alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAlarmDisplay/SendToTrending", ReplyAction="http://tempuri.org/IServiceAlarmDisplay/SendToTrendingResponse")]
        void SendToTrending(string tagId, double value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAlarmDisplayChannel : AlarmDisplay.ServiceReference1.IServiceAlarmDisplay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAlarmDisplayClient : System.ServiceModel.DuplexClientBase<AlarmDisplay.ServiceReference1.IServiceAlarmDisplay>, AlarmDisplay.ServiceReference1.IServiceAlarmDisplay {
        
        public ServiceAlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceAlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceAlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AlarmDisplayInit() {
            base.Channel.AlarmDisplayInit();
        }
        
        public System.Threading.Tasks.Task AlarmDisplayInitAsync() {
            return base.Channel.AlarmDisplayInitAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceTrending", CallbackContract=typeof(AlarmDisplay.ServiceReference1.IServiceTrendingCallback))]
    public interface IServiceTrending {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTrending/TrendingInit", ReplyAction="http://tempuri.org/IServiceTrending/TrendingInitResponse")]
        void TrendingInit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTrending/TrendingInit", ReplyAction="http://tempuri.org/IServiceTrending/TrendingInitResponse")]
        System.Threading.Tasks.Task TrendingInitAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceTrendingCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTrending/RaiseAlarm", ReplyAction="http://tempuri.org/IServiceTrending/RaiseAlarmResponse")]
        void RaiseAlarm(string alarm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceTrending/SendToTrending", ReplyAction="http://tempuri.org/IServiceTrending/SendToTrendingResponse")]
        void SendToTrending(string tagId, double value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceTrendingChannel : AlarmDisplay.ServiceReference1.IServiceTrending, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceTrendingClient : System.ServiceModel.DuplexClientBase<AlarmDisplay.ServiceReference1.IServiceTrending>, AlarmDisplay.ServiceReference1.IServiceTrending {
        
        public ServiceTrendingClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceTrendingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceTrendingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceTrendingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceTrendingClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void TrendingInit() {
            base.Channel.TrendingInit();
        }
        
        public System.Threading.Tasks.Task TrendingInitAsync() {
            return base.Channel.TrendingInitAsync();
        }
    }
}
